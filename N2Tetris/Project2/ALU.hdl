// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //zx x = 00
    And16 (a=x, b[0..15]=false, out=zxOP);
    Mux16 (a=x, b=zxOP, sel=zx, out=zxEND);
    
    //nx x = !x
    Not16 (in=zxEND, out=nxOP); //result(zx);
    Mux16 (a=zxEND, b=nxOP, sel=nx, out=nxEND);
    
    //zy y = 00
    And16 (a=y, b[0..15]=false, out=zyOP);
    Mux16 (a=y, b=zyOP, sel=zy, out=zyEND);

    //ny y = !y
    Not16 (in=zyEND, out=nyOP); //result(zy);
    Mux16 (a=zyEND, b=nyOP, sel=ny, out=nyEND);

  /**  X -----\ |if zx=1| --[x=0]--\ |if nx=1| --> Not(x=0 or x=x)
    *  X -----/ |if zx=0| --[x=x]--/ |if nx=0| --> x=0 or x=x
    *  We have 3 different results based on both operations, this is the same for Y
    */

    //f==1 = x+y, f==0 = x&y
    Add16 (a=nxEND, b=nyEND, out=fADD); 
    And16 (a=nxEND, b=nyEND, out=fAND); 
    Mux16 (a=fAND, b=fADD, sel=f, out= fOUT);

    //no
    Not16 (in=fOUT, out=noOP);
    Mux16 (a=fOUT, b=noOP, sel=no, out[0..7]=noOUTfirst, out[8..15]=noOUTsecond);

    //zr
    Or8Way (in=noOUTfirst, out=zrfirstOR);
    Or8Way (in=noOUTsecond, out=zrsecondOR);
    Or (a=zrfirstOR, b=zrsecondOR, out=zrOR);
    Not (in=zrOR, out=zr);

    //ng
    //Or (a=noOUTfirst[0], b=false, out=ng);
    Or8Way (in[7]=zrsecondOR, in[0..6]=false, out=ng);

    //end output
    And16 (a[0..7]=noOUTfirst, a[8..15]=noOUTsecond, b[0..15]=true, out=out);
}